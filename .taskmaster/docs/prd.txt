# Math Tutor UI Refactor - Product Requirements Document

## Executive Summary

Refactor the Math Tutor application's UI architecture to provide shared logic across all operations (Division, Addition, Multiplication) while maintaining operation-specific display components. The current implementation has good individual components but lacks cohesive shared architecture, causing changes to break other operations.

## Current State Analysis

### Working Components (To Preserve)
- `useMathGameState`: Excellent shared state management hook with proper generic typing
- `useMathKeyboardNav`: Good shared navigation logic with configurable field equality
- Division components: Well-structured with `DivisionDisplay`, `DivisionLayout`, `ProblemInput`, `ValidationFeedback`
- Multiplication components: `MultiplicationDisplay`, `MultiplicationLayout` with good structure
- Addition components: `AdditionDisplay` with functional logic
- Header with tab switching and level management
- UI components: `Input`, `Button`, `Card`, `ProblemComplete`, `StatusBar`

### Problem Areas (To Fix)
- `MathDisplay` component tries to be "all-in-one" but loses operation-specific capabilities
- App.tsx contains too much operation-specific field generation logic
- Changes to shared logic (submit, navigation) break other tabs
- Inconsistent component reuse across operations
- Complex conditional rendering based on operation type

## Goals

### Primary Goals
1. **Shared Architecture**: All operations use the same hooks and subcomponents for input handling, keyboard navigation, submit flow, and level progression
2. **Break-Safe Changes**: Modifications to shared logic must not break other operations
3. **Operation-Specific UI**: Each operation maintains its unique display/layout while sharing underlying logic
4. **Future Extensibility**: Architecture supports easy addition of Subtraction operation

### Success Criteria
- Changes to submit button behavior affect all operations consistently
- Cursor movement works identically across all tabs
- Level progression logic is unified
- Adding new operations requires minimal code duplication
- All existing functionality is preserved

## Technical Architecture

### Shared Components
- **useMathGameState**: Already excellent, keep as-is with minor enhancements
- **useMathKeyboardNav**: Good foundation, may need operation-specific configurations
- **ProblemInput**: Shared input component (extract from Division components)
- **ValidationFeedback**: Shared feedback component (extract from Division components)
- **StatusBar**: Shared progress/level display
- **SubmitControls**: Shared submit button and next problem controls

### Operation-Specific Components
- **DivisionDisplay**: Handles step-by-step division layout and unique logic
- **AdditionDisplay**: Handles column-based addition layout and carry logic
- **MultiplicationDisplay**: Handles partial products and multiplication layout
- **[Future] SubtractionDisplay**: Will handle borrowing and subtraction layout

### Component Hierarchy
```
App.tsx (tab management, shared hook orchestration)
├── Header (tab switching, level display)
├── LevelSelectorDrawer
└── Operation Display (DivisionDisplay | AdditionDisplay | MultiplicationDisplay)
    ├── Operation Layout (operation-specific rendering)
    ├── Shared Subcomponents (ProblemInput, ValidationFeedback, etc.)
    └── SubmitControls (shared submit/next logic)
```

### Data Flow
1. App.tsx manages current operation tab and creates shared hook instances
2. Shared hooks (useMathGameState, useMathKeyboardNav) provide consistent state and actions
3. Operation displays consume shared hooks and render operation-specific layouts
4. Shared subcomponents handle input, validation, and controls uniformly

## Implementation Requirements

### Phase 1: Extract Shared Subcomponents
- Extract ProblemInput from DivisionProblem folder to components/Shared/
- Extract ValidationFeedback from DivisionProblem folder to components/Shared/
- Create SubmitControls component for shared submit/next button logic
- Ensure StatusBar is properly shared

### Phase 2: Refactor Operation Displays
- Keep DivisionDisplay but refactor to use shared subcomponents
- Keep AdditionDisplay but refactor to use shared subcomponents  
- Keep MultiplicationDisplay but refactor to use shared subcomponents
- Remove the monolithic MathDisplay component

### Phase 3: Simplify App.tsx
- Move operation-specific field generation logic into operation displays
- Simplify App.tsx to focus on tab management and shared hook orchestration
- Ensure all operations use identical submit/navigation/progression flows

### Phase 4: Enhance Shared Hooks
- Add operation-specific configuration options to useMathKeyboardNav if needed
- Ensure useMathGameState handles all operation types consistently
- Add any missing shared logic for level progression and problem advancement

### Phase 5: Testing and Validation
- Verify all operations work identically for shared behaviors
- Test that changes to shared logic don't break any operation
- Validate keyboard navigation works consistently
- Ensure submit and level progression flows are uniform

## Technical Constraints

### Preserve Existing Functionality
- All current division step-by-step logic must be maintained
- Addition column and carry logic must be preserved
- Multiplication partial products logic must work unchanged
- Keyboard navigation patterns must remain consistent
- Level progression and problem generation must work as before

### Technology Stack
- React + TypeScript + Tailwind CSS (current stack)
- Maintain current hook patterns and state management approaches
- Preserve existing input validation and feedback mechanisms
- Keep current problem generation and validation utilities

### Code Quality Requirements
- All shared logic must be properly typed with TypeScript generics
- Components must follow existing patterns and naming conventions
- No console logging (per user preference)
- Maintain existing accessibility patterns and ARIA labels
- Follow existing CSS class naming and Tailwind usage

## User Experience Requirements

### Consistent Behavior Across Operations
- Tab switching preserves current problem state
- Submit button behavior identical across all operations
- Keyboard navigation (Tab, Arrow keys, Enter) works the same way
- Validation feedback appears consistently
- Level progression animations and feedback are uniform

### Operation-Specific Features
- Division: Step-by-step breakdown with quotient, multiply, subtract, bring-down
- Addition: Column-based input with carry handling
- Multiplication: Partial products with final product calculation
- All operations: Right-to-left input patterns where appropriate

### Performance Requirements
- No degradation in current performance
- Tab switching should be instantaneous
- Input responsiveness must remain excellent
- Problem generation should not be slower

## Success Metrics

### Functional Metrics
- All three operations work without breaking when shared logic is modified
- Keyboard navigation works identically across all tabs
- Submit and level progression logic is uniform
- Zero regression in existing functionality

### Code Quality Metrics
- Reduced code duplication across operations
- Clear separation between shared logic and operation-specific UI
- Easy addition of new operations (proven by Subtraction implementation readiness)
- Maintainable and readable component structure

### Developer Experience
- Changes to shared behaviors require modification in only one place
- Adding new operations follows clear, documented patterns
- Component boundaries are clear and logical
- Testing shared logic is straightforward

## Future Considerations

### Subtraction Operation
- Architecture must support adding Subtraction with borrowing logic
- Should reuse all shared components and hooks
- Unique display for borrowing visualization
- Integration should require minimal changes to existing code

### Additional Features
- Architecture should support future features like:
  - Hints and step-by-step guidance
  - Progress tracking and analytics
  - Different difficulty levels per operation
  - Custom problem creation
  - Performance statistics

### Scalability
- Component structure should support growth to more operations
- Shared logic should handle increasing complexity
- Performance should scale with additional operations
- Maintenance burden should decrease over time

## Technical Implementation Notes

### Hook Configuration Patterns
- useMathGameState should accept operation-specific problem generators and validators
- useMathKeyboardNav should accept operation-specific field definition functions
- All hooks should support operation-specific options while maintaining shared core logic

### Component Communication
- Operation displays should be responsible for their own field definitions
- Shared subcomponents should accept props for operation-specific customization
- Parent App component should orchestrate shared hooks but delegate specifics to operation displays

### Type Safety
- Maintain strong TypeScript typing throughout refactor
- Use generics appropriately for shared hooks and components
- Ensure operation-specific types are properly defined and used
- Preserve existing type definitions where they work well

This refactor will create a robust, maintainable architecture that preserves all existing functionality while enabling future growth and preventing the current issue of cross-operation breakage when making changes.

# Multiplication Tab Integration PRD

## Project Overview
The long-division-tutor application currently has working division and addition tabs with consistent UI and functionality. The multiplication tab has been partially implemented but needs to be fully integrated to match the look, feel, and functionality of the other tabs.

## Requirements

### 1. Visual Consistency
- The multiplication tab should have identical styling to the division and addition tabs
- Use the same font styles, colors, and layout patterns
- Ensure consistent padding, margins, and spacing
- Match the card/container styling with rounded corners and borders

### 2. Keyboard Navigation
- Implement tab/shift+tab navigation between input fields
- Ensure keyboard shortcuts work identically to division and addition tabs
- Support for arrow key navigation if implemented in other tabs

### 3. Carry Number Functionality
- Add empty boxes above the problem for carrying numbers
- Implement carry number input fields in the appropriate positions
- Ensure these fields can be navigated to with keyboard

### 4. Button Standardization
- Match button placement with other tabs (bottom of the problem)
- Use consistent button styling (colors, sizes, hover effects)
- Implement the same button set: Submit/Check, Next, Reset, New Problem
- Add relevant icons to buttons for visual appeal

### 5. Editable Problem
- Make the multiplication problem editable when clicked
- Show edit mode with input fields for multiplicand and multiplier
- Implement click-outside behavior to save changes
- Add the same edit mode indicator text as other tabs

### 6. Instruction Placement
- Place instructions in the same location as other tabs
- Use consistent instruction styling and wording
- Ensure help text appears in the same position

### 7. Feedback System
- Implement the same color-coding for correct/incorrect answers
- Show completion messages in the same style as other tabs
- Ensure error states are displayed consistently

### 8. Responsive Design
- Ensure the multiplication tab is responsive in the same way as other tabs
- Test on various screen sizes to confirm consistent behavior

## Technical Implementation Notes
- Reuse existing UI components from division and addition tabs
- Follow the same component structure for consistency
- Ensure state management follows the same patterns
- Fix any TypeScript errors during implementation 